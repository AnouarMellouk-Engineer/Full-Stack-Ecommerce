// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 3 layers : products info / user info / payment info 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// product info 
model Product {
  id               String        @id @default(uuid())
  name             String
  rating           Float         @default(0)
  price            Float
  quantity         Int           @default(0)
  sold             Float         @default(0)
  isNew            Boolean       @default(true)
  status           Float         @default(10)
  categorieId      String
  categorie        Categorie     @relation(fields: [categorieId], references: [id])
  specificationsId String        @unique
  specifications   Specification @relation(fields: [specificationsId], references: [id])
  images           Image[]
  uses             Use[]         @relation("products-uses")

  /**
   * -----------
   */
  discounts      Discount[]
  usersCards     User[]     @relation("Cards")
  usersFavorites User[]     @relation("Favorites")
  reviews        Review[]
  items          Item[]
}

model Categorie {
  id          String    @id @default(uuid())
  name        String
  descreption String
  products    Product[]
}

// "fbfa2e83-2825-4f6d-8148-8ea692acfa80"

model Specification {
  id      String   @id @default(uuid())
  CPU     String
  GPU     String
  screen  String
  storage Float
  ram     Int
  os      String
  Weight  Float
  product Product?
}

model Image {
  id        String  @id @default(uuid())
  path      String
  isMain    Boolean
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Use {
  id          String    @id @default(uuid())
  description String
  products    Product[] @relation("products-uses")
}

model Code {
  id        String     @id @default(uuid())
  code      String
  discounts Discount[]
}

model Discount {
  id        String  @id @default(uuid())
  value     Int // 100%
  codeId    String
  code      Code    @relation(fields: [codeId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

// users info

model User {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  email             String    @unique
  password          String
  productsCards     Product[] @relation("Cards")
  productsFavorites Product[] @relation("Favorites")
  reviews           Review[]
  orders            Order[]
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  comment   String
  rating    Float?
  createdAt DateTime @default(now())
}

// payment info

model Order {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  status          String
  chippingAddress String
  amount          Float
  paymentId       String   @unique
  payment         Payment  @relation(fields: [paymentId], references: [id])
  items           Item[]
}

model Payment {
  id     String @id @default(uuid())
  method String
  status String
  order  Order?
}

model Item {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}
