generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CardSession {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_card_session_expire")
  @@map("card_session")
  @@ignore
}

model Product {
  id               String        @id @default(uuid())
  name             String
  price            Float
  quantity         Int           @default(0)
  categorieId      String
  isNew            Boolean       @default(true)
  rating           Float         @default(0)
  sold             Float         @default(0)
  specificationsId String        @unique
  status           Float         @default(10)
  discounts        Discount[]
  images           Image[]
  items            Item[]
  categorie        Categorie     @relation(fields: [categorieId], references: [id])
  specifications   Specification @relation(fields: [specificationsId], references: [id])
  reviews          Review[]
  User_Carts       User[]        @relation("Carts")
  usersFavorites   User[]        @relation("Favorites")
  uses             Use[]         @relation("products-uses")
  brandId          String
  brand            Brand         @relation(fields: [brandId], references: [id])
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  image    String
  products Product[]
}

model Categorie {
  id          String    @id @default(uuid())
  name        String    @unique
  descreption String
  image       String
  products    Product[]
}

model Specification {
  id      String   @id @default(uuid())
  CPU     String
  GPU     String
  screen  String
  storage Float
  ram     Int
  os      String
  Weight  Float
  product Product?
}

model Image {
  id        String  @id @default(uuid())
  path      String
  isMain    Boolean
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Use {
  id          String    @id @default(uuid())
  description String
  products    Product[] @relation("products-uses")
}

model Code {
  id        String     @id @default(uuid())
  code      String
  discounts Discount[]
}

model Discount {
  id        String  @id @default(uuid())
  value     Int
  codeId    String
  productId String
  code      Code    @relation(fields: [codeId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, codeId])
}

model User {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  email             String    @unique
  password          String
  role              String    @default("user")
  orders            Order[]
  reviews           Review[]
  Product_Carts     Product[] @relation("Carts")
  productsFavorites Product[] @relation("Favorites")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  comment   String
  rating    Float?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id              String   @id @default(uuid())
  userId          String
  createdAt       DateTime @default(now())
  status          String
  chippingAddress String
  amount          Float
  paymentId       String   @unique
  items           Item[]
  payment         Payment  @relation(fields: [paymentId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Payment {
  id     String @id @default(uuid())
  method String
  status String
  order  Order?
}

model Item {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
